# more info on https://ledgerhq.atlassian.net/l/cp/Ar8F1nmM
name: 'Cascade merge'
description: 'Automatically cascade merge changes from one branch to others'
branding:
  icon: 'git-pull-request'
  color: 'purple'

inputs:
  gh-token:
    description: 'pass GITHUB_TOKEN'
    required: true
  default-branch:
    description: 'Default branch name (e.g., `main` or `master`)'
    required: false
    default: 'main'
  slack-webhook-url:
    description: 'SLACK_WEBHOOK_URL'
    required: false
  slack-api-token:
    description: 'SLACK_API_TOKEN'
    required: false
  auto-merge:
    description: 'Automatically merge branch instead of creating PR'
    required: false
    default: 'false'
  dedicated-branch-on-pr-creation:
    description: 'create dedicated branch for PR creation to avoid updating source branch'
    required: false
    default: 'false'

runs:
  using: "composite"

  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history so we can push to other branches

    - name: Skip cascade merge
      run: |
        function echo_green {
            echo -e "\e[32m$1\e[0m"
        }
        echo_green "The job was skipped because the commit message contains '[skip cascade merge]'"
      if: contains(env.COMMIT_MSG, '[skip cascade merge]')
      shell: bash
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message }}

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
      shell: bash

    - name: Detect conflicts
      run: |
        CASCADE_BRANCHES=( $(git for-each-ref --format="%(refname)" refs/remotes/origin/release | sed 's%refs/remotes/origin/%%g') )
        CASCADE_BRANCHES[${#CASCADE_BRANCHES[@]}]="main"

        # create the first branch
        git checkout ${CASCADE_BRANCHES[0]}
        for step in $(seq 0 $((${#CASCADE_BRANCHES[@]} - 2)))
        do
            src=${CASCADE_BRANCHES[${step}]}
            dest=${CASCADE_BRANCHES[$((${step}+1))]}
            git checkout $dest
            msg="$dest <= $src"
            git merge -m "$msg" $src || (echo " === $msg KO ==="; exit 1)
            echo " === $msg OK ==="
        done
      shell: bash

#   waiting for slack secrets to be shared as organization secrets:
#    https://ledgerhq.atlassian.net/servicedesk/customer/portal/14/ACCESS-3920?created=true
#    - name: Notify failing merge
#      if: failure()
#      uses: LedgerHQ/actions/slack-notification@main
#      env:
#        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
#        SLACK_API_TOKEN: ${{ inputs.slack-api-token }}
#        SLACK_CUSTOM_PAYLOAD: |-
#          {
#            "blocks": [
#              {
#                "type": "header",
#                "text": {
#                  "type": "plain_text",
#                  "text": ":boom: Merge conflict :boom:",
#                  "emoji": true
#                }
#              },
#              {
#                "type": "section",
#                "text": {
#                  "type": "mrkdwn",
#                  "text": "<@SLACK_MEMBER_ID> please fix it :iamwatchingyou:"
#                }
#              },
#              {
#                "type": "actions",
#                "elements": [
#                  {
#                    "type": "button",
#                    "text": {
#                      "type": "plain_text",
#                      "text": ":github: Github build",
#                      "emoji": true
#                    },
#                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#                  }
#                ]
#              },
#              {
#                "type": "divider"
#              }
#            ]
#          }
#

    # checkout again to clean all local merges done in previous step
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history so we can push to other branches

    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
      with:
        gh-cli-version: 2.14.2 # optional, see action.yml for current default

    - name: Cascade merge
      if: "! contains(env.COMMIT_MSG, '[skip cascade merge]')"  # continue only if the message does not contain '[skip cascade merge]'
      run: |
        # Set Bash to print all commands and stop executing on any error
        # set -ex

        # Define helper functions to echo messages in color
        function echo_green {
            echo -e "\e[32m$1\e[0m"
            echo $1 >> $GITHUB_STEP_SUMMARY
        }
        function echo_red {
            echo -e "\e[31m$1\e[0m"
            echo $1 >> $GITHUB_STEP_SUMMARY
        }
        
        # Define function to handle PR creation
        function handle_pr_creation {
          source_branch=$1
          target_branch=$2
          
          # Check if there are new commits to be merged
          git fetch
          commits=$(git log origin/$target_branch..origin/$source_branch)
          if [ -z "$commits" ]; then
            echo_green "The $target_branch branch is up to date with $source_branch. No PR is needed."
            exit 0
          fi

          if [ "${{ inputs.dedicated-branch-on-pr-creation }}" == "true" ]; then
            # Create a dedicated branch for the PR
            dedicated_branch="auto-cascade-merge-${source_branch}-to-${target_branch}"
            git checkout -b $dedicated_branch $source_branch
            git push origin $dedicated_branch
            source_branch=$dedicated_branch  # Make the PR from the dedicated branch
          fi

          echo_green "Creating PR to cascade merge from $source_branch to $target_branch"
          NEW_PR_URL=$(gh pr create --title "Cascade merge from $1 to $2" --body "Automated cascade merge" --base $target_branch --head $source_branch --repo ${{ github.repository }})
          PR_CREATION_STATUS=$?

          if [[ $PR_CREATION_STATUS -ne 0 ]]; then
            echo_red "PR creation failed."
            exit 1
          else
            echo_green "PR is created and ready for review: $NEW_PR_URL"
            exit 0
          fi
        }
        
        # Constants
        BACKPORT_TARGET_BRANCH_PATTERN="release/"
        
        # Extract original branch and version
        ORIGINAL_BRANCH="${GITHUB_REF#refs/heads/}"
        ORIGINAL_VERSION="${ORIGINAL_BRANCH#"$BACKPORT_TARGET_BRANCH_PATTERN"}"
        
        # Get release versions from remote branches
        RELEASE_VERSIONS=$(git branch -r | grep -oP "origin/${BACKPORT_TARGET_BRANCH_PATTERN}\\K.*" | sort -Vr)
        CURRENT_INDEX=$(echo $RELEASE_VERSIONS | tr ' ' '\n' | grep -n $ORIGINAL_VERSION | cut -d: -f1)


        # Loop through each version in the release versions list before the current index
        for TARGET_VERSION in $(echo $RELEASE_VERSIONS | tr ' ' '\n' | head -n $((CURRENT_INDEX - 1))); do
          TARGET_BRANCH="$BACKPORT_TARGET_BRANCH_PATTERN$TARGET_VERSION"
          
          # Create a local branch that tracks the remote branch
          git branch $TARGET_BRANCH origin/$TARGET_BRANCH

          # Handle PR creation if auto-merge is false
          if [ "${{ inputs.auto-merge }}" == "false" ]; then
            handle_pr_creation $ORIGINAL_BRANCH $TARGET_BRANCH
          else
            git checkout $TARGET_BRANCH
            git merge $ORIGINAL_BRANCH --no-ff
            git push origin $TARGET_BRANCH
            echo_green "Changes from $ORIGINAL_BRANCH have been merged into $TARGET_BRANCH and pushed to the repository."
          fi
          ORIGINAL_BRANCH=$TARGET_BRANCH

        done
        
        # After processing all release branches, merge the last target branch into the default branch
        TARGET_BRANCH="${{ inputs.default-branch }}"
        # Handle PR creation if auto-merge is false
        if [ "${{ inputs.auto-merge }}" == "false" ]; then
          handle_pr_creation $ORIGINAL_BRANCH $TARGET_BRANCH
        else
          git branch $TARGET_BRANCH origin/$TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git merge $ORIGINAL_BRANCH --no-ff
          git push origin $TARGET_BRANCH
          echo_green "Changes from $ORIGINAL_BRANCH have been merged into $TARGET_BRANCH and pushed to the repository."
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        COMMIT_MSG: ${{ github.event.head_commit.message }}
