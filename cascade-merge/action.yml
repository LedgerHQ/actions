# more info on https://ledgerhq.atlassian.net/l/cp/Ar8F1nmM
name: 'Auto Cascade Merge'
description: 'Automatically cascade merge changes from one branch to others.'
branding:
  icon: 'git-pull-request'
  color: 'purple'

inputs:
  gh-token:
    description: 'pass GITHUB_TOKEN'
    required: true
  default-branch:
    description: 'Default branch name (e.g., main or master)'
    required: true
    default: 'main'
  auto-merge:
    description: 'Whether to auto-merge the pull requests or not. true/false'
    required: true
    default: 'false'

runs:
  using: "composite"

  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history so we can push to other branches

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
      shell: bash

    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@master

    - name: Create PR
      id: create_prs
      run: |
        # Enables the shell to print all executed commands and exit if any command fails
        # set -ex
        
        # A function to compare semantic version numbers. Echoes 1 if the first is greater, 2 if the second is greater, 0 if they are equal
        compare_versions() {
            IFS='.' read -ra VERSION1 <<< "$1"
            IFS='.' read -ra VERSION2 <<< "$2"
        
            for i in {0..2}; do
                PART1=${VERSION1[i]:-0}
                PART2=${VERSION2[i]:-0}
                if (( PART1 > PART2 )); then
                    echo 1
                    return
                elif (( PART1 < PART2 )); then
                    echo 2
                    return
                fi
            done
            echo 0
        }
        
        # beautify the message by coloring it to a green color
        function echo_green {
            echo -e "\e[32m$1\e[0m"
        }
        
        PREFIX="auto-cascade-merge"
        ORIGINAL_BRANCH="${GITHUB_REF#refs/heads/}"
        # backport target branch pattern is harcoded here as `release/`
        BACKPORT_TARGET_BRANCH_PATTERN="release/"
        # Remove the branch pattern prefix from the original branch name to get the original version
        ORIGINAL_VERSION="${ORIGINAL_BRANCH#"$BACKPORT_TARGET_BRANCH_PATTERN"}"

        # List and sort (in reverse, sorting in semantic version way) all the branches that match the pattern
        RELEASE_VERSIONS=$(git branch -r | grep -oP "origin/${BACKPORT_TARGET_BRANCH_PATTERN}\\K.*" | sort -Vr)
        TARGET_VERSIONS="${{ inputs.default-branch }}"
        
        # Loop through all release versions
        for VERSION in $RELEASE_VERSIONS; do
          echo "Comparing versions $VERSION and $ORIGINAL_VERSION"
          RESULT=$(compare_versions "$VERSION" "$ORIGINAL_VERSION")
          echo "Comparison result between versions $VERSION and $ORIGINAL_VERSION: $RESULT"
          # If the version in the loop is greater than the original version, add it to the target versions
          if [[ $RESULT -eq 1 ]]; then
            TARGET_VERSIONS="$TARGET_VERSIONS $VERSION"
          fi
        done
        
        NEW_PR_URLS=""
        
        # Loop through all target versions
        for TARGET_VERSION in $TARGET_VERSIONS; do
          if [[ $TARGET_VERSION == "${{ inputs.default-branch }}" ]]; then
            TARGET_BRANCH="${{ inputs.default-branch }}"
          else
            TARGET_BRANCH="$BACKPORT_TARGET_BRANCH_PATTERN$TARGET_VERSION"
          fi
        
          BRANCH_NAME="$PREFIX-${ORIGINAL_BRANCH}-to-$TARGET_BRANCH"

          # Get the PR number of the existing PR (if any) that has the same base and head
          PR_NUMBER=$(gh pr list --base $TARGET_BRANCH --head $BRANCH_NAME --json number --jq '.[0].number')
        
          # If a PR number exists, close that PR and delete the branch        
          if [ "$PR_NUMBER" -eq "$PR_NUMBER" ] 2>/dev/null; then
            echo_green "closing old PR $PR_NUMBER"
            gh pr close $PR_NUMBER --delete-branch
            echo_green "old PR $PR_NUMBER was closed"
          fi
        
          # Create a new branch, merge the original branch into it, and push it
          git checkout -b $BRANCH_NAME
          git merge $ORIGINAL_BRANCH
          git push -f origin $BRANCH_NAME
          
          # Attempt to create a new PR and store the return status
          echo_green "attempting to create a pull request to cascade merge from $ORIGINAL_BRANCH to $TARGET_BRANCH"
          NEW_PR_URL=$(gh pr create --title "Cascade merge from $ORIGINAL_BRANCH to $TARGET_BRANCH" --body "Automated cascade merge" --base $TARGET_BRANCH --head $BRANCH_NAME --repo ${{ github.repository }} --draft) || PR_CREATION_STATUS=$?
          if [[ $PR_CREATION_STATUS -ne 0 ]]; then
              # If PR creation failed, print a message and delete the branch both locally and remotely
              echo_green "PR creation failed. Deleting branch."
              git checkout $ORIGINAL_BRANCH
              git branch -d $BRANCH_NAME
              git push origin --delete $BRANCH_NAME
          else
              echo_green "PR is created $NEW_PR_URL"
              # If PR creation succeeded, make the PR ready for review
              gh pr ready "${NEW_PR_URL##*/}"
              echo_green "PR is marked as ready $NEW_PR_URL"
          fi
        
          NEW_PR_URLS="$NEW_PR_URLS $NEW_PR_URL"
        
          # If a PR number exists, add a comment to it pointing to the new PR
          if [ "$PR_NUMBER" -eq "$PR_NUMBER" ] 2>/dev/null; then
            gh pr comment $PR_NUMBER --body "This PR is continued in $NEW_PR_URL"
          fi
        
          # Checkout back to the original branch
          git checkout $ORIGINAL_BRANCH
        done

        # Pass the new PR URLs to the next steps in the job
        echo "new_pr_urls=$NEW_PR_URLS" >> $GITHUB_ENV
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Merge PRs
      run: |        
        # beautify the message by coloring it to a green color
        function echo_green {
            echo -e "\e[32m$1\e[0m"
        }

        for PR_URL in $new_pr_urls; do
          gh pr merge $PR_URL --auto --merge
          echo_green "PR $PR_URL merged successfully"
        done
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
      shell: bash
      if: ${{ inputs.auto-merge == 'true' }}