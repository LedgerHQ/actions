# more info on https://ledgerhq.atlassian.net/l/cp/Ar8F1nmM
name: 'Auto Cascade Merge'
description: 'Automatically cascade merge changes from one branch to others.'
branding:
  icon: 'git-pull-request'
  color: 'purple'

inputs:
  gh-token:
    description: 'pass GITHUB_TOKEN'
    required: true
  default-branch:
    description: 'Default branch name (e.g., main or master)'
    required: true
    default: 'main'
  slack-webhook-url:
    description: 'SLACK_WEBHOOK_URL'
    required: false
  slack-api-token:
    description: 'SLACK_API_TOKEN'
    required: false

runs:
  using: "composite"

  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history so we can push to other branches

    - name: Skip cascade merge
      run: |
        function echo_green {
            echo -e "\e[32m$1\e[0m"
        }
        echo_green "The job was skipped because the commit message contains '[skip cascade merge]'"
      if: contains(env.COMMIT_MSG, '[skip cascade merge]')
      shell: bash
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message }}

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
      shell: bash

    - name: Detect conflicts
      run: |
        CASCADE_BRANCHES=( $(git for-each-ref --format="%(refname)" refs/remotes/origin/release | sed 's%refs/remotes/origin/%%g') )
        CASCADE_BRANCHES[${#CASCADE_BRANCHES[@]}]="main"

        # create the first branch
        git checkout ${CASCADE_BRANCHES[0]}
        for step in $(seq 0 $((${#CASCADE_BRANCHES[@]} - 2)))
        do
            src=${CASCADE_BRANCHES[${step}]}
            dest=${CASCADE_BRANCHES[$((${step}+1))]}
            git checkout $dest
            msg="$dest <= $src"
            git merge -m "$msg" $src || (echo " === $msg KO ==="; exit 1)
            echo " === $msg OK ==="
        done
      shell: bash

    - name: Notify failing merge
      if: failure()
      uses: LedgerHQ/actions/slack-notification@main
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
        SLACK_API_TOKEN: ${{ inputs.slack-api-token }}
        SLACK_CUSTOM_PAYLOAD: |-
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": ":boom: Merge conflict :boom:",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "<@SLACK_MEMBER_ID> please fix it :iamwatchingyou:"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":github: Github build",
                      "emoji": true
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              },
              {
                "type": "divider"
              }
            ]
          }

    # checkout again to clean all local merges done in previous step
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history so we can push to other branches

    - name: Cascade merge
      if: "! contains(env.COMMIT_MSG, '[skip cascade merge]')"  # continue only if the message does not contain '[skip cascade merge]'
      run: |
        # Enables the shell to print all executed commands and exit if any command fails
        set +e
        
        # beautify the message by coloring it to a green color
        function echo_green {
            echo -e "\e[32m$1\e[0m"
        }
        function echo_red {
            echo -e "\e[31m$1\e[0m"
        }
        
        BACKPORT_TARGET_BRANCH_PATTERN="release/"
        ORIGINAL_BRANCH="${GITHUB_REF#refs/heads/}"
        ORIGINAL_VERSION="${ORIGINAL_BRANCH#"$BACKPORT_TARGET_BRANCH_PATTERN"}"
        
        RELEASE_VERSIONS=$(git branch -r | grep -oP "origin/${BACKPORT_TARGET_BRANCH_PATTERN}\\K.*" | sort -Vr)
        
        CURRENT_INDEX=$(echo $RELEASE_VERSIONS | tr ' ' '\n' | grep -n $ORIGINAL_VERSION | cut -d: -f1)

        for TARGET_VERSION in $(echo $RELEASE_VERSIONS | tr ' ' '\n' | head -n $((CURRENT_INDEX - 1))); do
        
            TARGET_BRANCH="$BACKPORT_TARGET_BRANCH_PATTERN$TARGET_VERSION"
        
            # Create a local branch that tracks the origin branch
            git branch $TARGET_BRANCH origin/$TARGET_BRANCH
        
            # Attempt a local merge
            git checkout $TARGET_BRANCH
            git merge $ORIGINAL_BRANCH --no-commit --no-ff
        
            if [ $? -ne 0 ]; then
                echo_red "Merge conflict detected. Skipping branch $TARGET_BRANCH."
                git merge --abort
                exit 1
            else
                git merge --abort
        
            echo_green "No merge conflicts detected. Changes are directly merged from $ORIGINAL_BRANCH to $TARGET_BRANCH"
            git checkout $TARGET_BRANCH
            git merge $ORIGINAL_BRANCH --no-ff
            git push origin $TARGET_BRANCH
            git branch $TARGET_BRANCH origin/$TARGET_BRANCH
            ORIGINAL_BRANCH=$TARGET_BRANCH
            fi
        done
        
        # After looping through all release branches, merge back to main branch
        TARGET_BRANCH="${{ inputs.default-branch }}"
        git branch $TARGET_BRANCH origin/$TARGET_BRANCH
        git checkout $TARGET_BRANCH
        git merge $ORIGINAL_BRANCH --no-ff
        git push origin $TARGET_BRANCH
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        COMMIT_MSG: ${{ github.event.head_commit.message }}
