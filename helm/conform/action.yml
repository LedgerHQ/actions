name: "Run Kubeconform"
description: "Run Kubeconform againt specified K8S version."

inputs:
  kubernetes-version:
    description: "Specify the kubernetes version that you want to test."
    required: true
  charts-path:
    description: "Specify the path where the charts are located."
    type: string
    required: false
    default: "./helm/charts/"

runs:
  using: "composite"
  steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubeconform
        shell: bash
        env:
          KUBERNETES_VERSION: ${{ inputs.kubernetes-version }}
          KUBECONFORM_VERSION: "v0.4.12"
          KUBECONFORM_BASE_URL: "https://github.com/yannh/kubeconform/releases/download"
        run: | 
          set -o pipefail
          OS=$(uname)
          # install kubeconform
          curl -sSfL "${KUBECONFORM_BASE_URL}/${KUBECONFORM_VERSION}/kubeconform-${OS}-amd64.tar.gz" |
          tar -xzf - kubeconform
      
      - name: Run kubeconform
        shell: bash

          FILENAME_FORMAT: "{kind}-{group}-{version}"
        run: |
          set -o pipefail
          for chart in ${{ inputs.charts-path }}/*/; do
            values=$(echo "${chart}" | sed "s/charts/values/g")
            echo "Running kubeconform for folder: '${chart}'"

            if [ ! -f "Chart.yaml" ]; then
                echo "Chart.yaml not present, skip."
                continue
            fi

            helm dep up "${chart}" &&  # why helm update up ?
            for value in $(find "${values}" -type f -name "*.yaml"); do
              echo -e "â–¶ Validating ${chart} with values from ${value}"
              helm template --kube-version "${KUBERNETES_VERSION#v}" -f "${value}" "${chart}" |
              ./kubeconform -strict -ignore-missing-schemas -exit-on-error \
                -schema-location default -schema-location 'helm/k8s-crds-schemas/{{ .ResourceKind }}{{ .KindSuffix }}.json' \
                -kubernetes-version "${KUBERNETES_VERSION#v}" -summary -verbose -schema-location default
            done

          done
