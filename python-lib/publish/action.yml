name: "Publish"
description: "Publish a new version"

inputs:
  python-version:
    description: "Version of python to use"
    required: false
    default: "3.9"
  public:
    description: "If true, push to public python package index pypi.org, otherwise use our private fury.io"
    required: false
    default: false
  dist_format:
    description: "Format of the use for the publishable ouput"
    required: false
    default: "sdist"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}
    - name: Set env vars
      run: |
        echo "RELEASE_NAME=$(python setup.py --fullname)" >> $GITHUB_ENV
      shell: bash
    - name: Create Release
      if: ${{ startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
    - name: Push to GemFury
      if: ${{ inputs.public == 'false' && startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push' }}
      env:
        DEPLOY_TOKEN: ${{ env.PYPI_PUSH_TOKEN }}
      run: |
        if [[ ${{ inputs.dist_format }} == "bdist_wheel" ]]; then
          pip install wheel
          python setup.py bdist_wheel
          package_file=$(find dist -type f -name "${{ env.RELEASE_NAME }}*.whl")
        elif [[ ${{ inputs.dist_format }} == "sdist" ]]; then
          python setup.py sdist
          package_file="dist/${{ env.RELEASE_NAME }}.tar.gz"
        else
          echo "Unsuported dist format '${{ inputs.dist_format }}'"
          exit 1
        fi
        echo "Publishing package: ${package_file}"
        curl -F package=@${package_file} https://${{ env.DEPLOY_TOKEN }}@push.fury.io/ledger/
      shell: bash
    - name: Push to Pypi
      if: ${{ inputs.public == 'true' && startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push' }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ env.PYPI_PUSH_TOKEN  }}
        TWINE_NON_INTERACTIVE: 1
      run: |
        python3 -m pip install --upgrade build twine
        if [[ ${{ inputs.dist_format }} == "sdist" ]]; then
          python3 -m build
          twine upload dist/*
        else
          echo "Unsuported dist format '${{ inputs.dist_format }}'"
          exit 1
        fi
      shell: bash
