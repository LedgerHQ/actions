name: "Publish"
description: "Publish a new version"

inputs:
  python-version:
    description: "Version of python to use"
    required: false
    default: "3.9"
  public:
    description: "if true, push to public python package index pypi.org, otherwise use our private fury.io"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    - name: Get repo details
      if: ${{ inputs.public == 'false' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/') }}
      id: feature
      run: |
        ref="${{ github.ref }}"
        echo "::set-output name=package-name::$(python setup.py --name)"
        echo "::set-output name=feature-name::${ref#refs/heads/feature/}"
      shell: bash
    - uses: LedgerHQ/actions/gemfury/latest-version@main
      if: ${{ inputs.public == 'false' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/') }}
      id: fury
      with:
        package-name: ${{ steps.feature.outputs.package-name }}
        feature-name: ${{ steps.feature.outputs.feature-name }}
      env:
        FULL_ACCESS_TOKEN: ${{ env.PYPI_FULL_ACCESS_TOKEN }}
    - name: Set release name env var
      run: |
        if [[ -n "${{ steps.fury.outputs.next-feature-tag }}" ]]; then
          if [[ $(grep -E ' +version=".+",' setup.py | wc -l) == 1 ]]; then
            echo "Temporarily updating version with feature tag ${{ steps.fury.outputs.next-feature-tag }}."
            sed -i 's/\( \+\)version="\(.\+\)",/\1version="\2${{ steps.fury.outputs.next-feature-tag }}",/' setup.py
          else
            echo "Can't find a version to update in setup.py"
            exit 1
          fi
        fi
        echo "RELEASE_NAME=$(python setup.py --fullname)" >> $GITHUB_ENV
      shell: bash
    - name: Create Release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
    - name: Build dist
      if: ${{ inputs.public == 'false' && github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || steps.fury.outputs.next-feature-tag != '') }}
      run: python setup.py sdist
      shell: bash
    - name: Push to GemFury
      if: ${{ inputs.public == 'false' && github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || steps.fury.outputs.next-feature-tag != '') }}
      uses: LedgerHQ/actions/gemfury/publish@main
      env:
        PUSH_TOKEN: ${{ env.PYPI_PUSH_TOKEN || env.PYPI_FULL_ACCESS_TOKEN }}
    - name: Push to Pypi
      if: ${{ inputs.public == 'true' && startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push' }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ env.PYPI_PUSH_TOKEN || env.PYPI_FULL_ACCESS_TOKEN }}
        TWINE_NON_INTERACTIVE: "1"
      run: |
        python3 -m pip install --upgrade build twine
        python3 -m build
        twine upload dist/*
      shell: bash
