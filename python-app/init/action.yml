name: "test"
description: "run unittest"

inputs:
  sync-dev:
    description: "sync with --dev"
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: clone repo
      uses: actions/checkout@v4

    - name: parse python version
      id: parse-python-version
      run: |
        version=$(cat Pipfile | grep python_version | grep -oE '[0-9]+\.[0-9]+')
        echo $version
        if [[ $? != 0 || -z $version ]]; then
          version=3.9
        fi
        echo "python-version=$version" >> $GITHUB_OUTPUT
      shell: bash

    - name: setup python with parsed version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.parse-python-version.outputs.python-version }}
        cache: 'pipenv'

    - name: Authenticate against JFrog Artifactory
      id: jfrog-login
      if: env.JFROG_REPOSITORY
      uses: LedgerHQ/actions-security/actions/jfrog-login@actions/jfrog-login-1

    - name: URL Encode credentials
      if: steps.jfrog-login.outcome == 'success'
      run: |
        : URL Encode credentials
        echo "JFROG_USER=$(echo $JFROG_USER | jq -Rr '@uri')" >> $GITHUB_ENV
        echo "JFROG_TOKEN=$(echo $JFROG_TOKEN | jq -Rr '@uri')" >> $GITHUB_ENV
      shell: bash

    - name: Install pipenv
      run: |
        pip install --upgrade pip pipenv wheel
        python --version ; pip --version ; pipenv --version
      shell: bash

    - name: Install packages
      run: |
        pipenv sync ${{ inputs.sync-dev == 'true' && '--dev' || '' }}
      env:
        PYPI_DEPLOY_TOKEN: ${{ env.PYPI_DEPLOY_TOKEN }}
      shell: bash

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ env.CI_BOT_USERNAME || github.actor }}
        password: ${{ env.CI_BOT_TOKEN || github.token }}
