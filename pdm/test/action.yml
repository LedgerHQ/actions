name: Test
description: Execute test using `pdm` scripts

inputs:
  python-version:
    description: Python version to run the tests with
    required: true
    default: "3.11"
  pypi-token:
    description: A Token to Ledger private PyPI with read permissions
    required: true
    default: ""
  github-token:
    description: A Github token with proper permissions
    default: ${{ github.token }}
  init:
    description: Clone & sync
    default: 'true'
  parameters:
    description: Some extra parameters to pass to `pdm cover`
    default: ""
  group:
    description: Dependency group(s) to install
    default: test
  exclude-group:
    description: Dependency group(s) to exclude from install
    default: ''
  allure-username:
    description: Allure username (requires both username and password to enable Allure)
    default: ''
  allure-password:
    description: Allure password (requires both username and password to enable Allure)
    default: ''

runs:
  using: composite
  steps:
    - name: Clone and install dependencies
      if: inputs.init == 'true'
      id: meta
      uses: LedgerHQ/actions/pdm/init@main
      with:
        python-version: ${{ inputs.python-version }}
        group: ${{ inputs.group }}
        exclude-group: ${{ inputs.exclude-group }}
        pypi-token: ${{ inputs.pypi-token }}

    - name: Run Tests
      run: pdm cover -v --force-sugar --color=yes ${{ inputs.parameters }}
      env:
        FORCE_COLOR: 'true'
      shell: bash

    - name: Pytest coverage comment
      id: coverage
      uses: MishaKav/pytest-coverage-comment@v1.1.52
      with:
        github-token: ${{ inputs.github-token }}
        coverage-path-prefix: ${{ steps.meta.outputs.has_src == 'true' && 'src/' || '' }}
        pytest-xml-coverage-path: ./reports/coverage.xml
        junitxml-path: ./reports/tests.xml
        title: Coverage Report for Python ${{ inputs.python-version }}
        unique-id-for-comment: ${{ inputs.python-version }}

    - name: Add coverage report to summary
      run: echo -e ${{ steps.coverage.outputs.summaryReport }} >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Detect Allure report presence
      id: check-allure
      continue-on-error: true
      run: |
        [ -d reports/allure ] && REPORT='true' || REPORT='false'
        echo "has_report=${REPORT}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate Allure environment file
      if: steps.check-allure.outputs.has_report == 'true' && inputs.allure-username && inputs.allure-password
      continue-on-error: true
      run: |
        ENV_FILE=reports/allure/environment.properties
        echo "language = python"
        echo "python_version = ${{ inputs.python-version }}" >> $ENV_FILE
        echo "os = ${{ runner.os }}" >> $ENV_FILE
        echo "arch = ${{ runner.arch }}" >> $ENV_FILE
        echo "github_runner = ${{ runner.name }}" >> $ENV_FILE
        echo "github_runner_env = ${{ runner.environment }}" >> $ENV_FILE
        echo "repository = ${{ github.repository }}" >> $ENV_FILE
        echo "branch = ${{ steps.meta.outputs.branch }}" >> $ENV_FILE
        echo "commit = ${{ github.sha }}" >> $ENV_FILE
        echo "actor = ${{ github.triggering_actor }}" >> $ENV_FILE
        if [ "${{ steps.meta.outputs.is_pr }}" == "true" ]; then
          echo "pull_request = https://github.com/${{ github.repository }}/pull/${{ github.event.number }}" >> $ENV_FILE
        fi
        if [ "${{ github.ref_type }}" == "tag" ]; then
          echo "tag = ${{ github.ref_name }}" >> $ENV_FILE
        fi
      shell: bash

    - name: Publish Allure report
      id: allure
      if: steps.check-allure.outputs.has_report == 'true' && inputs.allure-username && inputs.allure-password
      continue-on-error: true
      uses: LedgerHQ/send-to-allure-server-action@2.1.2
      with:
        allure-server-url: "https://vault.allure.green.ledgerlabs.net"
        build-name: ${{ github.workflow }}
        build-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        username: ${{ inputs.allure-username }}
        password: ${{ inputs.allure-password }}
        path: ${{ steps.meta.outputs.identifier }}@${{ steps.meta.outputs.branch }}
        allure-results: reports/allure

    - name: Add Allure report link to the pull-request
      if: steps.allure.outcome == 'success' && steps.meta.outputs.is_pr == 'true'
      continue-on-error: true
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: "[ðŸ“Š Allure test report](${{ steps.allure.outputs.report-url }})"
        comment_tag: allure

    - name: Add Allure report link to the summary
      if: steps.allure.outcome == 'success'
      run: echo "[ðŸ“Š Allure test report](${{ steps.allure.outputs.report-url }})" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Send coverage report to Backstage
      if: steps.meta.outputs.has_backstage == 'true' && env.BACKSTAGE_URL && github.ref_name == 'main'
      continue-on-error: true  # Not critical
      run: |
        # See:
        # - https://github.com/backstage/community-plugins/tree/main/workspaces/code-coverage/plugins/code-coverage-backend
        REPORT_URL="${BACKSTAGE_URL}/api/code-coverage/report?entity=component:${{ steps.meta.outputs.identifier }}"
        curl -X POST -H "Content-Type:text/xml" -d @reports/coverage.xml "${REPORT_URL}&coverageType=cobertura"
        echo "ðŸ“Š Coverage report uploaded to Backstage: <${REPORT_URL}>" >> $GITHUB_STEP_SUMMARY
      shell: bash
