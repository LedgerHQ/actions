name: Test
description: Execute test using `pdm` scripts

inputs:
  kind:
    description: Kind of project to release (lib/app)
    default: app
  python-version:
    description: Python version to run the tests with
    required: true
    default: "3.11"
  pypi-token:
    description: Private PyPI token (GemFury read)
    required: false
    deprecationMessage: use JFrog instead
  github-token:
    description: A Github token with proper permissions
    default: ${{ github.token }}
  init:
    description: Clone & sync
    default: 'true'
  parameters:
    description: Some extra parameters to pass to `pdm cover`
    default: ""
  group:
    description: Dependency group(s) to install
    default: test
  exclude-group:
    description: Dependency group(s) to exclude from install
    default: ''
  matrix-id:
    description: An optional unique ID for matrix builds (triggers parallelism)
  report-only:
    description: Only perform aggregation and reporting (parallelism closure)
  docker-compose:
    description: Start and wait Docker Compose

runs:
  using: composite
  steps:
    - name: Clone and install dependencies
      if: inputs.init == 'true'
      id: meta
      uses: LedgerHQ/actions/pdm/init@main
      with:
        python-version: ${{ inputs.python-version }}
        group: ${{ inputs.group }}
        exclude-group: ${{ inputs.exclude-group }}
        pypi-token: ${{ inputs.pypi-token }}
        skip-dependencies: ${{ inputs.report-only }}

    - name: Compute unique matrix hashable ID
      if: inputs.matrix-id
      id: matrix-meta
      run: |
        : Compute unique matrix hashable ID
        # Generate a unique hash for each matrix path test path
        id=$(echo "${{ inputs.matrix-id }}" | sha256sum | cut -c 1-8)
        echo "id=${id}" >> $GITHUB_OUTPUT
        echo "suffix=.${id}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Start and wait Docker Compose
      if: inputs.docker-compose == 'true' && inputs.report-only == null
      run: |
        : Start and wait Docker Compoose
        docker compose up --detach --wait
      shell: bash

    - name: Run tests
      if: inputs.report-only == null
      run: |
        : Run tests
        params=(--force-sugar --color=yes ${{ inputs.parameters }})
        [ "${{ runner.debug }}" == "1" ] && params+=(-vv) || params+=(-v)
        pdm cover "${params[@]}"
      env:
        FORCE_COLOR: 'true'
        COVERAGE_FILE: reports/coverage${{ inputs.matrix-id && steps.matrix-meta.outputs.suffix || '' }}.data
        COVERAGE_XML: reports/coverage${{ inputs.matrix-id && steps.matrix-meta.outputs.suffix || '' }}.xml
        JUNIT_XML: reports/junit${{ inputs.matrix-id && steps.matrix-meta.outputs.suffix || '' }}.xml
      shell: bash

    - name: Detect Allure report presence
      id: check-allure
      if: inputs.report-only == null
      continue-on-error: true
      run: |
        : Detect Allure report presence
        [ -d reports/allure ] && REPORT='true' || REPORT=''
        [ "${{ env.ALLURE_USERNAME && env.ALLURE_PASSWORD }}" != "" ] && CREDENTIALS='true' || CREDENTIALS=''
        [ "${REPORT}${CREDENTIALS}" == "truetrue" ] && ALLURE='true' || ALLURE=''

        echo "has_report=${REPORT}" >> $GITHUB_OUTPUT
        echo "has_credentials=${CREDENTIALS}" >> $GITHUB_OUTPUT
        echo "has_allure=${ALLURE}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate Allure environment file
      if: steps.check-allure.outputs.has_allure
      continue-on-error: true
      run: |
        : Generate Allure environment file
        ENV_FILE=reports/allure/environment.properties
        echo "language = python" >> $ENV_FILE
        echo "python_version = ${{ inputs.python-version }}" >> $ENV_FILE
        echo "os = ${{ runner.os }}" >> $ENV_FILE
        echo "arch = ${{ runner.arch }}" >> $ENV_FILE
        echo "github_runner = ${{ runner.name }}" >> $ENV_FILE
        echo "github_runner_env = ${{ runner.environment }}" >> $ENV_FILE
        echo "repository = ${{ github.repository }}" >> $ENV_FILE
        echo "${{ github.ref_type }} = ${{ github.head_ref || github.ref_name }}" >> $ENV_FILE
        echo "commit = ${{ github.sha }}" >> $ENV_FILE
        echo "actor = ${{ github.triggering_actor }}" >> $ENV_FILE
        if [ "${{ steps.meta.outputs.is_pr }}" == "true" ]; then
          echo "pull_request = https://github.com/${{ github.repository }}/pull/${{ github.event.number }}" >> $ENV_FILE
        fi
      shell: bash

    - name: Upload Allure results
      if: steps.check-allure.outputs.has_allure
      id: allure-upload
      uses: LedgerHQ/actions/allure/upload@main
      with:
        url: ${{ env.ALLURE_URL }}
        username: ${{ env.ALLURE_USERNAME }}
        password: ${{ env.ALLURE_PASSWORD }}
        results: reports/allure

    - name: Save Allure UUID
      if: steps.allure-upload.outputs.uuid
      run: |
        : Save Allure UUID
        echo $UUID > reports/allure.uuid${{ inputs.matrix-id && steps.matrix-meta.outputs.suffix || '' }}
      env:
        UUID: ${{ steps.allure-upload.outputs.uuid }}
      shell: bash

    - name: Store reports
      if: inputs.matrix-id
      uses: actions/upload-artifact@v4
      with:
        name: reports${{ inputs.matrix-id && format('-{0}', steps.matrix-meta.outputs.id) || '' }}
        path: |
          reports/coverage*
          reports/junit*
          reports/allure.uuid*

    - name: Merge reports artifacts
      if: inputs.report-only
      uses: actions/upload-artifact/merge@v4
      continue-on-error: true
      with:
        name: reports
        pattern: reports-*
        delete-merged: true

    - name: Download reports
      if: inputs.report-only
      uses: actions/download-artifact@v4
      with:
        name: reports
        path: reports

    - name: Merge reports
      if: inputs.report-only
      run: |
        : Merge reports
        echo "Install merge tooling"
        pip install coverage[toml] junitparser
        echo "Merge JUnit reports"
        junitparser merge --glob reports/junit.*.xml reports/junit.xml
        echo "Combine coverage report"
        coverage combine --data-file reports/coverage.all reports/coverage.*.data
        echo "Generate XML coverage report"
        coverage xml --data-file reports/coverage.all -o reports/coverage.xml
      shell: bash

    - name: Generate Pytest coverage report
      id: coverage
      if: inputs.matrix-id == null
      uses: MishaKav/pytest-coverage-comment@v1.1.53
      with:
        github-token: ${{ inputs.github-token }}
        coverage-path-prefix: ${{ steps.meta.outputs.has_src == 'true' && 'src/' || '' }}
        pytest-xml-coverage-path: ./reports/coverage.xml
        junitxml-path: ./reports/junit.xml
        hide-comment: true

    - name: Add coverage report to summary
      if: inputs.matrix-id == null
      run: |
        : Add coverage report to summary
        echo -e ${{ steps.coverage.outputs.summaryReport }} >> summary.md
      shell: bash

    - name: Prepare Allure report metadata
      id: allure-report-meta
      if: inputs.matrix-id == null
      run: |
        : Prepare Allure report metadata
        echo 'uuids<<EOF' >> $GITHUB_OUTPUT
        (cat reports/allure.uuid* >> $GITHUB_OUTPUT || true)
        echo 'EOF' >> $GITHUB_OUTPUT
        [ "${{ steps.meta.outputs.branch }}" == "main" ] && suffix="" || suffix="@${{ steps.meta.outputs.branch }}"
        echo "suffix=${suffix}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate Allure report
      if: steps.allure-report-meta.outputs.uuids && !inputs.matrix-id
      id: allure-generate
      uses: LedgerHQ/actions/allure/generate@main
      with:
        url: ${{ env.ALLURE_URL }}
        username: ${{ env.ALLURE_USERNAME }}
        password: ${{ env.ALLURE_PASSWORD }}
        path: ${{ steps.meta.outputs.identifier }}${{ steps.allure-report-meta.outputs.suffix }}
        results: ${{ steps.allure-report-meta.outputs.uuids }}
        report-name: ${{ steps.meta.outputs.identifier }}

    - name: Add Allure report link to the summary
      if: steps.allure-generate.outcome == 'success'
      run: |
        : Add Allure report link to the summary
        echo "[ðŸ“Š Allure test report](${{ steps.allure-generate.outputs.url }})" >> summary.md
      shell: bash

    - name: Export summary
      if: inputs.matrix-id == null
      run: |
        : Export summary
        cat summary.md >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Add reports to the pull-request
      if: github.event_name == 'pull_request' && !inputs.matrix-id
      continue-on-error: true
      uses: thollander/actions-comment-pull-request@v3
      with:
        file-path: summary.md
        comment-tag: test-reports
        github-token: ${{ inputs.github-token }}

    - name: Send coverage report to Backstage
      if: steps.meta.outputs.has_backstage == 'true' && env.BACKSTAGE_URL && github.ref_name == 'main' && !inputs.matrix-id
      continue-on-error: true  # Not critical
      run: |
        : Send coverage report to Backstage
        # See:
        # - https://github.com/backstage/community-plugins/tree/main/workspaces/code-coverage/plugins/code-coverage-backend
        REPORT_URL="${BACKSTAGE_URL}/api/code-coverage/report?entity=component:${{ steps.meta.outputs.identifier }}"
        curl -X POST -H "Content-Type:text/xml" -d @reports/coverage.xml "${REPORT_URL}&coverageType=cobertura"
        echo "ðŸ“Š Coverage report uploaded to Backstage: <${REPORT_URL}>" | tee -a $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Build the library
      if: inputs.kind == 'lib'
      run: pdm build
      env:
        FORCE_COLOR: 'true'
      shell: bash

    - name: Attached built library (wheel & sdist) as a workflow artifact
      id: upload-lib
      if: inputs.kind == 'lib'
      uses: actions/upload-artifact@v4
      with:
        name: library
        path: |
          dist/*.whl
          dist/*.tar.gz
        retention-days: 7
        if-no-files-found: error

    - name: Add built library link to the summary
      if: inputs.kind == 'lib'
      run: echo "[ðŸ“¦ Built library (wheel & sdist)](${{ steps.upload-lib.outputs.artifact-url }})" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Add built library link to the pull-request
      if: inputs.kind == 'lib' && steps.meta.outputs.is_pr
      continue-on-error: true
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: "[ðŸ“¦ Built library (wheel & sdist)](${{ steps.upload-lib.outputs.artifact-url }})"
        comment_tag: library
