name: Initialize `pdm`
description: Install Python and `pdm` with cache and extract metadata

inputs:
  python-version:
    description: Python version to use
    required: true
    default: "3.11"
  group:
    description: Dependency group(s) to install
    default: ''
  exclude-group:
    description: Dependency group(s) to exclude from install
    default: ''
  history:
    description: Fetch the full history
    required: false
    default: 'false'
  pypi-token:
    description: Private PyPI token (GemFury read)
    required: false
    deprecationMessage: use JFrog instead
  github-token:
    description: A Github token with proper permissions
    required: false
    default: ${{ github.token }}
  skip-dependencies:
    description: Skip dependencies installation

outputs:
  identifier:
    description: The short project identifier
    value: ${{ steps.meta.outputs.identifier }}
  has_tests:
    description: Whether the project has tests exposed through the `test` command
    value: ${{ steps.meta.outputs.has_tests }}
  has_coverage:
    description: Whether the project has tests with coverage exposed through the `cover` command
    value: ${{ steps.meta.outputs.has_coverage }}
  has_docs:
    description: Whether the project has a documentation exposed through the `doc` command
    value: ${{ steps.meta.outputs.has_docs }}
  has_openapi:
    description: Whether the project has an OpenAPI specification exposed through the `doc:openapi` command
    value: ${{ steps.meta.outputs.has_openapi }}
  has_docker:
    description: Whether the project a Docker image (aka. a `Dockerfile` present at root)
    value: ${{ steps.meta.outputs.has_docker }}
  has_src:
    description: Whether the project is using a `src` layout or not
    value: ${{ steps.meta.outputs.has_src }}
  has_backstage:
    description: Whether the project is exposing Backstage catalog infos
    value: ${{ steps.meta.outputs.has_backstage }}
  is_distribution:
    description: Whether the project is a distribution or not
    value: ${{ steps.meta.outputs.is_distribution }}
  is_pr:
    description: Is the current workflow run a pull-request
    value: ${{ steps.meta.outputs.is_pr }}
  branch:
    description: The branch from which workflow has been triggered
    value: ${{ steps.meta.outputs.branch }}
  has_jfrog:
    description: Whether this project uses JFrog Artifactory or not
    value: ${{ steps.detect-jfrog.outputs.has_jfrog }}
  jfrog-domain:
    description: Base domain of Ledger's JFrog platform if authenticated
    value: ${{ steps.jfrog-login.outputs.jfrog-domain }}
  jfrog-url:
    description: Base URL of Ledger's JFrog platform if authenticated
    value: ${{ steps.jfrog-login.outputs.jfrog-url }}
  jfrog-user:
    description: Username extracted from the OIDC token if authenticated
    value: ${{ steps.jfrog-login.outputs.oidc-user }}
  jfrog-token:
    description: OIDC token generated by JFrog CLI if authenticated
    value: ${{ steps.jfrog-login.outputs.oidc-token }}


runs:
  using: composite
  steps:
    - name: Clone
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: ${{ inputs.history == 'true' && '0' || '1' }}

    - name: Setup git
      run: |
        : Setup git
        git config user.name github-actions
        git config user.email github-actions@ledger.fr
      shell: bash

    - name: detect-jfrog
      id: detect-jfrog
      run: |
        : Detect JFrog requirement
        HAS_JFROG=$(grep "jfrog" pyproject.toml > /dev/null && echo "true" || echo "false")
        echo "has_jfrog=${HAS_JFROG}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Authenticate against JFrog Artifactory
      id: jfrog-login
      if: (steps.detect-jfrog.outputs.has_jfrog == 'true' || env.JFROG_REPOSITORY) && !env.JFROG_TOKEN
      uses: LedgerHQ/actions-security/actions/jfrog-login@actions/jfrog-login-1

    - name: Set up Python and PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: true
      env:
        PYPI_DEPLOY_TOKEN: ${{ inputs.pypi-token || '' }}

    - name: Set some settings
      run: |
        : Set some settings
        pdm config install.cache true
      shell: bash

    - name: Install dependencies (main, all extras and specified dev group)
      if: inputs.skip-dependencies == null
      run: |
        : Install dependencies
        echo "${{ github.workspace }}/.venv/bin/python" > .pdm-python
        params=(--group :all --dev)
        [ -z "${GROUPS}" ] || params+=(--group ${GROUPS})
        [ -z "${EXCLUDED_GROUPS}" ] || params+=(--without ${EXCLUDED_GROUPS})
        [ "${{ runner.debug }}" == "1" ] && params+=(-vv)
        pdm sync "${params[@]}"
      env:
        PYPI_DEPLOY_TOKEN: ${{ inputs.pypi-token || ''  }}
        GROUPS: ${{ inputs.group }}
        EXCLUDED_GROUPS: ${{ inputs.exclude-group }}
      shell: bash

    - name: Extract some metadata
      id: meta
      run: |
        : Extract some metadata
        echo "identifier=$(pdm show --name)" >> $GITHUB_OUTPUT
        echo "branch=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

        COMMANDS=$(pdm run --json)

        HAS_TESTS=$(jq 'has("test")' <<< "$COMMANDS")
        echo "has_tests=${HAS_TESTS}" >> $GITHUB_OUTPUT

        HAS_COVERAGE=$(jq 'has("cover")' <<< "$COMMANDS")
        echo "has_coverage=${HAS_COVERAGE}" >> $GITHUB_OUTPUT

        HAS_DOCS=$(jq 'has("doc")' <<< "$COMMANDS")
        echo "has_docs=${HAS_DOCS}" >> $GITHUB_OUTPUT

        HAS_OPENAPI=$(jq 'has("doc:openapi")' <<< "$COMMANDS")
        echo "has_openapi=${HAS_OPENAPI}" >> $GITHUB_OUTPUT

        [ -f Dockerfile ] && HAS_DOCKER='true' || HAS_DOCKER='false'
        echo "has_docker=${HAS_DOCKER}" >> $GITHUB_OUTPUT

        [ -d src/ ] && HAS_SRC='true' || HAS_SRC='false'
        echo "has_src=${HAS_SRC}" >> $GITHUB_OUTPUT

        [ -f catalog-info.yaml ] && HAS_BACKSTAGE='true' || HAS_BACKSTAGE='false'
        echo "has_backstage=${HAS_BACKSTAGE}" >> $GITHUB_OUTPUT

        IS_PR="${{ github.event_name == 'pull_request' }}"
        echo "is_pr=${IS_PR}" >> $GITHUB_OUTPUT

        IS_DIST=$(grep -E "distribution\s*=\s*true" pyproject.toml > /dev/null && echo "true" || echo "false")
        echo "is_distribution=${IS_DIST}" >> $GITHUB_OUTPUT
      env:
        PYPI_DEPLOY_TOKEN: ${{ inputs.pypi-token || ''  }}
      shell: bash
