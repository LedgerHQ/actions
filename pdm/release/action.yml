name: Release
description: Bump version and publish release assets

inputs:
  kind:
    description: Kind of project to release (lib/app)
    required: true
    default: app
  pypi-token:
    description: A Token to publish on PyPI (private or public)
    required: true
    default: ""
  github-token:
    description: A Github token with
    required: true
  increment:
    description: "Kind of increment (optional: MAJOR|MINOR|PATCH)"
    required: false
  group:
    description: Dependency group(s) to install
    default: docs
  exclude-group:
    description: Dependency group(s) to exclude from install
    default: ''
  public:
    description: Is it a public library ?
    default: 'false'
  dgoss-args:
    description: dgoss extra docker parameters
    default: ""



outputs:
  url:
    description: The generated Github Release URL
    value: ${{ steps.release.outputs.url }}
  version:
    description: The released version
    value: ${{ steps.bump.outputs.version }}
  documentation:
    description: The released documentation URL
    value: ${{ steps.doc.outputs.url }}


runs:
  using: composite
  steps:
    - name: Clone and install dependencies
      uses: LedgerHQ/actions/pdm/init@main
      id: meta
      with:
        group: ${{ inputs.group }}
        exclude-group: ${{ inputs.exclude-group }}
        history: true
        github-token: ${{ inputs.github-token }}
        pypi-token: ${{ inputs.pypi-token }}
        python-version: "3.11"

    - name: Bump using commitizen
      id: bump
      run: |
        CMD=('pdm' 'bump' '--changelog-to-stdout' '--git-output-to-stderr')
        if [[ $INPUT_INCREMENT ]]; then
          CMD+=('--increment' "$INPUT_INCREMENT")
        fi
        "${CMD[@]}" > body.md

        REV="$(pdm run cz version --project)"
        echo "REVISION=${REV}" >>"$GITHUB_ENV"
        echo "version=${REV}" >>"$GITHUB_OUTPUT"
      env:
        FORCE_COLOR: 'true'
        INPUT_INCREMENT: ${{ inputs.increment }}
      shell: bash

    # Build once to publish the same package on every repository
    - name: Build distribution
      if: inputs.kind == 'lib'
      run: pdm build
      env:
        FORCE_COLOR: 'true'
      shell: bash

    - name: Push to GemFury
      id: gemfury
      if: inputs.kind == 'lib' && inputs.public != 'true' && env.PDM_PUBLISH_USERNAME != null
      env:
        PDM_PUBLISH_REPO: https://push.fury.io/ledger
        PDM_PUBLISH_USERNAME: ${{ inputs.pypi-token }}
        PDM_PUBLISH_PASSWORD: "-" # tricks github actions YAML parser and PDM test for empty password
        FORCE_COLOR: 'true'
      run: pdm publish --no-build
      shell: bash

    - name: Push to our internal Nexus
      id: nexus
      if: inputs.kind == 'lib' && inputs.public != 'true' && env.NEXUS_HOST != null && env.NEXUS_USER != null && env.NEXUS_PASSWORD != null
      env:
        PDM_PUBLISH_REPO: https://${{ env.NEXUS_HOST }}/repository/${{ env.NEXUS_REPO || 'pypi-internal'}}/
        PDM_PUBLISH_USERNAME: ${{ env.NEXUS_USER }}
        PDM_PUBLISH_PASSWORD: ${{ env.NEXUS_PASSWORD }}
        FORCE_COLOR: 'true'
      run: pdm publish --no-build
      shell: bash

    - name: Push to PyPI
      id: pypi
      if: inputs.kind == 'lib' && inputs.public == 'true' && env.PDM_PUBLISH_PASSWORD != null
      env:
        PDM_PUBLISH_PASSWORD: ${{ inputs.pypi-token }}
        FORCE_COLOR: 'true'
      run: pdm publish --no-build
      shell: bash

    - name: Login to JFrog Ledger
      id: jfrog-login
      uses: LedgerHQ/actions-security/actions/jfrog-login@actions/jfrog-login-1

    - name: Push to our internal JFrog Artifactory
      id: artifactory
      if: step.jfrog-login.outputs.oidc-user
      env:
        PDM_PUBLISH_REPO: ${{ steps.jfrog-login.outputs.jfrog-url }}/artifactory/api/pypi/vault-pypi-prod-green/simple
        PDM_PUBLISH_USERNAME: ${{ steps.jfrog-login.outputs.oidc-user }}
        PDM_PUBLISH_PASSWORD: ${{ steps.jfrog-login.outputs.oidc-token }}
        FORCE_COLOR: 'true'
      run: pdm publish --no-build
      shell: bash

    - name: Docker image
      uses: LedgerHQ/actions/pdm/docker@main
      id: docker
      if: inputs.kind == 'app' && steps.meta.outputs.has_docker == 'true'
      with:
        clone: false
        version: ${{ env.REVISION }}
        pypi-token: ${{ inputs.pypi-token }}
        github-token: ${{ inputs.github-token }}
        dgoss-args: ${{ inputs.dgoss-args }}

    - name: Add docker image to release body
      if: steps.docker.outputs.image
      continue-on-error: true  # Not critical
      run: |
        echo -e "\n**Docker image**: \`${{ steps.docker.outputs.image }}@${{ steps.docker.outputs.digest }}\`\n" >> body.md
      shell: bash

    - name: Documentation
      id: doc
      continue-on-error: true  # Can be manually published after
      uses: LedgerHQ/actions/pdm/doc@main
      with:
        version: ${{ env.REVISION }}
        pypi-token: ${{ inputs.pypi-token }}
        openapi: ${{ inputs.kind == 'app' && steps.meta.outputs.has_openapi == 'true' }}
        site: true
        init: false

    - name: Add doc to release body
      if: steps.doc.outputs.url
      continue-on-error: true  # Not critical
      run: |
        echo -e "\n**Documentation**: <${{ steps.doc.outputs.url }}>\n" >> body.md
      shell: bash

    - name: Push release commit and tag
      run: |
        git push -f
        git push -f origin ${{ env.REVISION }}
      shell: bash

    - name: Github Release
      id: release
      continue-on-error: true  # Can be manually published after
      uses: softprops/action-gh-release@v2
      with:
        body_path: "body.md"
        tag_name: ${{ env.REVISION }}
        token: ${{ inputs.github-token }}
        fail_on_unmatched_files: false
        files: |
          dist/*
          docs/openapi.yaml
          CHANGELOG.md

    - name: Publish summary
      continue-on-error: true
      run: echo "🚀 [Version ${{ env.REVISION }}](${{ steps.release.outputs.url }}) has been published" >> $GITHUB_STEP_SUMMARY
      shell: bash

    # Cleanup published artifacts if tag push failed
    - name: Show release failure in summary
      # Runs on release failure if doc has been published
      if: always() && job.status == 'failure'
      run: |
        echo "❌ Release ${REVISION} failed" >> $GITHUB_STEP_SUMMARY
        echo "DIST=$(pdm show --name)" >> $GITHUB_ENV
      shell: bash

    - name: Cleanup documentation
      # Runs on release failure if doc has been published
      if: always() && job.status == 'failure' && steps.doc.outcome == 'success'
      run: |
        pdm run mike delete --push ${REVISION}
        echo "🧹 Documentation for version ${REVISION} has been removed" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Cleanup docker
      # Runs on release failure if docker has been published
      if: always() && job.status == 'failure' && steps.docker.outcome == 'success'
      run: |
        # See:
        #   - https://docs.github.com/en/rest/packages/packages#list-package-versions-for-a-package-owned-by-an-organization
        #   - https://docs.github.com/en/rest/packages/packages#delete-package-version-for-an-organization
        GHAPI=("gh" "api" "-H" "Accept: application/vnd.github+json" "-H" "X-GitHub-Api-Version: 2022-11-28")
        PKG='${{ github.event.repository.name }}'
        VERSIONS=$(${GHAPI[@]} /orgs/LedgerHQ/packages/container/${PKG}/versions)
        QUERY='.[] | select(.name == "${{ steps.docker.outputs.digest }}") | .id'
        VERSION_ID=$(echo ${VERSIONS} | jq --raw-output ${QUERY})
        ${GHAPI[@]} --method DELETE /orgs/LedgerHQ/packages/container/${PKG}/versions/${VERSION_ID}
        IMAGE='${{ steps.docker.outputs.image }}@${{ steps.docker.outputs.digest }}'
        echo "🧹 Docker image \`${IMAGE}\` has been deleted" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Cleanup Nexus
      # Runs on release failure if package has been published on Nexus
      if: always() && job.status == 'failure' && steps.nexus.outcome == 'success'
      run: |
        # See:
        #   - https://help.sonatype.com/en/search-api.html#SearchAPI-SearchComponents
        #   - https://help.sonatype.com/en/components-api.html#delete-component
        API="https://${NEXUS_HOST}/service/rest/v1"
        CURL=("curl" "-u" "${NEXUS_USER}:${NEXUS_PASSWORD}")
        REPO=${NEXUS_REPO:-'pypi-internal'}
        CANDIDATES=$(${CURL[@]} "${API}/search?repository=${REPO}&name=${DIST}&version=${REVISION}")
        COMPONENT_ID=$(echo ${CANDIDATES} | jq --raw-output ".items[0].id")
        ${CURL[@]} -X DELETE "${API}/components/${COMPONENT_ID}"
        echo "🧹 Nexus package for \`${DIST}==${REVISION}\` have been deleted" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Cleanup GemFury
      # Runs on release failure if package has been published to GemFury
      if: always() && job.status == 'failure' && steps.gemfury.outcome == 'success'
      run: |
        # See:
        #   - https://github.com/gemfury/cli/blob/main/api/yank.go
        #   - https://github.com/gemfury/cli/blob/main/api/client.go
        curl -X DELETE \
          -H "Accept: application/vnd.fury.v1" \
          -H "Authorization: ${{ inputs.pypi-token }}" \
          https://api.fury.io/packages/${DIST}/versions/${REVISION}
        echo "🧹 GemFury package \`${DIST}==${REVISION}\` have been deleted" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Cleanup PyPI
      # Runs on release failure if package has been published to PyPI
      if: always() && job.status == 'failure' && steps.pypi.outcome == 'success'
      run: |
        # See: https://pypi.org/help/#file-name-reuse
        echo "⚠️ You need to manually delete [\`${DIST}==${REVISION}\` on PyPI](https://pypi.org/project/${DIST}/${REVISION}/)." >> $GITHUB_STEP_SUMMARY
        echo "⚠️ The version is not usable anymore. See the [dedicated PyPI FAQ entry](https://pypi.org/help/#file-name-reuse)." >> $GITHUB_STEP_SUMMARY
      shell: bash
