name: Build Docker Image
description: Build Docker image

inputs:
  clone:
    description: Whether to clone or not
    default: 'true'
  version:
    description: Force the built version
  pypi-token:
    description: A Token to Ledger private PyPI with read permissions
    required: true
  github-token:
    description: A Github token with proper permissions
  build-args:
    description: Docker build command extra `build-args` (multiline supported)
    default: ""
  secrets:
    description: Docker build command extra `secrets` (multiline supported)
    default: ""
  dgoss-args:
    description: dgoss extra docker parameters
    default: ""


outputs:
  image:
    description: The published docker image
    value: ${{ steps.summary.outputs.image }}
  digest:
    description: The published docker image digest
    value: ${{ steps.summary.outputs.digest }}

runs:
  using:  composite
  steps:
    - name: Clone
      if: inputs.clone == 'true'
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Compute docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/ledgerhq/${{ github.event.repository.name }}
        flavor: latest=false
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=${{ inputs.version }},enable=${{ inputs.version != '' }}
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=pep440,pattern={{major}}
          type=pep440,pattern={{major}}.{{minor}}

    - name: Compute some variables
      id: vars
      run: |
        : Compute some variables
        VERSION=${{ inputs.version || github.ref_type == 'tag' && github.ref_name || format('0.dev+{0}.{1}', env.DOCKER_METADATA_OUTPUT_VERSION, github.sha) }}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        [ -f Dockerfile ] && HAS_DOCKER='true' || HAS_DOCKER='false'
        echo "has_docker=${HAS_DOCKER}" >> $GITHUB_OUTPUT
        [ -f goss.yaml ] && HAS_GOSS='true' || HAS_GOSS='false'
        echo "has_goss=${HAS_GOSS}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Login to GitHub Container Registry
      if: steps.vars.outputs.has_docker == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Build docker image
      if: steps.vars.outputs.has_goss == 'true'
      uses: docker/build-push-action@v6
      with:
        build-args: |
          VERSION=${{ steps.vars.outputs.version }}
          DD_GIT_REPOSITORY_URL=github.com/${{ github.repository }}
          DD_GIT_COMMIT_SHA=${{ github.sha }}
          ${{ inputs.build-args }}
        secrets: |
          PYPI_DEPLOY_TOKEN=${{ inputs.pypi-token }}
          ${{ inputs.secrets }}
        pull: true
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install goss
      uses: e1himself/goss-installation-action@v1.2.1
      if: steps.vars.outputs.has_goss == 'true'

    - name: Run GOSS validation
      id: goss
      if: steps.vars.outputs.has_goss == 'true'
      run: |
        : Run GOSS validation
        dgoss run ${{ inputs.dgoss-args }} ghcr.io/ledgerhq/${{ github.event.repository.name }}:${DOCKER_METADATA_OUTPUT_VERSION}
      env:
        # Make dgoss works with Ledger dind runners
        GOSS_FILES_STRATEGY: cp
        CONTAINER_LOG_OUTPUT: ${{ runner.temp }}/goss.log
      shell: bash

    - name: Display GOSS failure log
      if: failure() && steps.vars.outputs.has_goss == 'true' && steps.goss.conclusion == 'failure'
      run: |
        : Display GOSS failure log
        cat ${{ runner.temp }}/goss.log
      shell: bash

    - name: Push docker image
      uses: docker/build-push-action@v6
      id: docker
      if: steps.vars.outputs.has_docker == 'true'
      with:
        build-args: |
          VERSION=${{ steps.vars.outputs.version }}
          DD_GIT_REPOSITORY_URL=github.com/${{ github.repository }}
          DD_GIT_COMMIT_SHA=${{ github.sha }}
          ${{ inputs.build-args }}
        secrets: |
          PYPI_DEPLOY_TOKEN=${{ inputs.pypi-token }}
          ${{ inputs.secrets }}
        pull: ${{ steps.vars.outputs.has_goss != 'true' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Summary
      id: summary
      if: steps.vars.outputs.has_docker == 'true'
      run: |
        : Create Summary
        IMAGE="${{ fromJSON(steps.docker.outputs.metadata)['image.name'] }}"
        IMAGE=${IMAGE##*,}
        DIGEST="${{ fromJSON(steps.docker.outputs.metadata)['containerimage.digest'] }}"
        echo "**Image:** \`${IMAGE}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${DIGEST}\`" >> $GITHUB_STEP_SUMMARY
        echo "image=${IMAGE}" >> $GITHUB_OUTPUT
        echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
      shell: bash
