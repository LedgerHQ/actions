name: Publish documentation
description: Publish the documentation

inputs:
  version:
    description: Force a version to be built
    required: false
  openapi:
    description: Has OpenAPI specs
    default: 'false'
  site:
    description: Publish a documentation site
    default: 'false'
  pypi-token:
    description: Private PyPI token (GemFury read)
    required: false
    default: ""
    deprecationMessage: use JFrog instead
  init:
    description: Clone & sync
    default: 'true'
  group:
    description: Dependency group(s) to install
    default: docs
  exclude-group:
    description: Dependency group(s) to exclude from install
    default: ''
  python-version:
    description: Python version used to build

outputs:
  url:
    description: The published documentation URL
    value: ${{ steps.summary.outputs.url }}

runs:
  using: composite
  steps:
    - name: Clone and install dependencies
      if: inputs.init == 'true'
      uses: LedgerHQ/actions/pdm/init@main
      with:
        group: ${{ inputs.group }}
        exclude-group: ${{ inputs.exclude-group }}
        history: true
        pypi-token: ${{ inputs.pypi-token }}
        python-version: ${{ inputs.python-version }}

    - uses: actions/download-artifact@v4
      with:
        name: changelog

    - uses: actions/download-artifact@v4
      if: inputs.openapi == 'true'
      with:
        name: openapi
        path: docs

    - name: Deploy the documentation site (main)
      if: inputs.site == 'true' && github.ref == 'refs/heads/main'
      run: |
        : Deploy the documentation site \(main\)
        pdm doc:deploy --push --update-aliases main latest
      env:
        FORCE_COLOR: 'true'
      shell: bash

    - name: Deploy the documentation site (tag)
      id: deploy-tag
      if: inputs.site == 'true' && inputs.version || startsWith(github.ref, 'refs/tags')
      run: |
        : Deploy the documentation site \(tag\)
        version="${{ inputs.version || github.head_ref || github.ref_name }}"
        major_minor=${version%.*}
        pdm doc:deploy --push ${major_minor}
        echo "version=${major_minor}" >> $GITHUB_OUTPUT
      env:
        FORCE_COLOR: 'true'
      shell: bash

    - name: Publish summary
      id: summary
      if: inputs.site == 'true'
      run: |
        : Publish summary
        version=${{ github.ref == 'refs/heads/main' && 'latest' || steps.deploy-tag.outputs.version }}
        url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${version}"
        echo "url=${url}" >> $GITHUB_OUTPUT
        echo "ðŸ“– A new documentation has been published: ${url}" | tee -a $GITHUB_STEP_SUMMARY
      shell: bash
